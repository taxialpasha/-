function createEnhancedLoginScreen() {
        console.log('إنشاء شاشة تسجيل الدخول المحسنة...');
        
        // إنشاء عنصر الشاشة
        const loginScreen = document.createElement('div');
        loginScreen.id = 'auth-login-screen';
        loginScreen.className = 'auth-screen';
        
        // إضافة محتوى الشاشة
        loginScreen.innerHTML = `
            <div class="auth-container">
                <div class="auth-content">
                    <div class="auth-header">
                        <div class="auth-logo">
                            <i class="fas fa-chart-line"></i>
                            <span>نظام الاستثمار المتكامل</span>
                        </div>
                        <p class="auth-welcome">مرحباً بك في نظام الاستثمار المتكامل</p>
                    </div>
                    
                    <div class="auth-tabs">
                        <button class="auth-tab active" data-tab="login">تسجيل الدخول</button>
                        <button class="auth-tab" data-tab="register">إنشاء حساب</button>
                    </div>
                    
                    <div class="auth-tab-content active" id="login-tab-content">
                        <form id="login-form">
                            <div class="form-group">
                                <label class="form-label">البريد الإلكتروني</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-envelope"></i>
                                    <input type="email" class="form-input" id="login-email" required autocomplete="email">
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">كلمة المرور</label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-lock"></i>
                                    <input type="password" class="form-input" id="login-password" required autocomplete="current-password">
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-options">
                                <label class="checkbox-container">
                                    <input type="checkbox" id="remember-me">
                                    <span class="checkmark"></span>
                                    <span>تذكرني</span>
                                </label>
                                <button type="button" class="btn-link" id="forgot-password-btn">نسيت كلمة المرور؟</button>
                            </div>
                            
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary btn-block btn-animated">
                                    <span>تسجيل الدخول</span>
                                    <i class="fas fa-sign-in-alt"></i>
                                </button>
                            </div>
                        </form>
                    </div>
                    
                    <div class="auth-tab-content" id="register-tab-content">
                        <form id="register-form">
                            <div class="form-group">
                                <label class="form-label">الاسم الكامل</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-user"></i>
                                    <input type="text" class="form-input" id="register-name" required>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">البريد الإلكتروني</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-envelope"></i>
                                    <input type="email" class="form-input" id="register-email" required>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">كلمة المرور</label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-lock"></i>
                                    <input type="password" class="form-input" id="register-password" required>
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">تأكيد كلمة المرور</label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-lock"></i>
                                    <input type="password" class="form-input" id="register-confirm-password" required>
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">رمز المسؤول <small>(مطلوب للمستخدم الأول أو للمسؤول)</small></label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-key"></i>
                                    <input type="password" class="form-input" id="register-admin-code">
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">نوع المستخدم</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-users-cog"></i>
                                    <select class="form-select" id="register-user-type">
                                        <option value="user">مستخدم عادي</option>
                                        <option value="manager">مدير</option>
                                        <option value="admin">مسؤول</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary btn-block btn-animated">
                                    <span>إنشاء حساب</span>
                                    <i class="fas fa-user-plus"></i>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                
                <div class="auth-footer">
                    <p>نظام الاستثمار المتكامل &copy; ${new Date().getFullYear()} | <span class="version-info">الإصدار ${AUTH_SYSTEM_VERSION}</span></p>
                </div>
            </div>
            
            <div class="auth-notification">
                <div class="auth-notification-content">
                    <i class="auth-notification-icon"></i>
                    <span class="auth-notification-message"></span>
                </div>
                <button class="auth-notification-close">&times;</button>
            </div>
        `;
        
        // إضافة عنصر الشاشة إلى الصفحة
        document.body.appendChild(loginScreen);
        
        // إضافة مستمعي الأحداث لشاشة تسجيل الدخول
        setupLoginScreenListeners(loginScreen);
        
        // إظهار الشاشة بتأثير حركي
        setTimeout(() => {
            loginScreen.classList.add('active');
        }, 10);
    }
    
    /**
     * تحديث شاشة تسجيل الدخول الموجودة
     * @param {HTMLElement} loginScreen - عنصر شاشة تسجيل الدخول
     */
    function updateLoginScreen(loginScreen) {
        // التحقق مما إذا كانت الشاشة تحتاج إلى تحديث (مقارنة بالإصدار القديم)
        if (!loginScreen.querySelector('.auth-welcome')) {
            // إذا كانت الشاشة قديمة، نقوم بإزالتها وإنشاء واحدة جديدة
            loginScreen.parentNode.removeChild(loginScreen);
            createEnhancedLoginScreen();
        }
    }

    /**
     * إضافة مستمعي الأحداث لشاشة تسجيل الدخول
     * @param {HTMLElement} loginScreen - عنصر شاشة تسجيل الدخول
     */
    function setupLoginScreenListeners(loginScreen) {
        // التبديل بين تبويبات تسجيل الدخول والتسجيل
        const authTabs = loginScreen.querySelectorAll('.auth-tab');
        authTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // إزالة الفئة النشطة من جميع التبويبات
                authTabs.forEach(t => t.classList.remove('active'));
                
                // إضافة الفئة النشطة للتبويب المحدد
                this.classList.add('active');
                
                // إخفاء جميع محتويات التبويبات
                const tabContents = loginScreen.querySelectorAll('.auth-tab-content');
                tabContents.forEach(content => content.classList.remove('active'));
                
                // إظهار محتوى التبويب المحدد
                const tabName = this.getAttribute('data-tab');
                const selectedTabContent = loginScreen.querySelector(`#${tabName}-tab-content`);
                if (selectedTabContent) {
                    selectedTabContent.classList.add('active');
                    
                    // التركيز التلقائي على أول حقل في التبويب
                    const firstInput = selectedTabContent.querySelector('input:not([type="hidden"])');
                    if (firstInput) {
                        firstInput.focus();
                    }
                }
            });
        });
        
        // إظهار/إخفاء كلمة المرور
        const togglePasswordButtons = loginScreen.querySelectorAll('.toggle-password');
        togglePasswordButtons.forEach(button => {
            button.addEventListener('click', function() {
                const passwordInput = this.parentElement.querySelector('input');
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    this.querySelector('i').classList.remove('fa-eye');
                    this.querySelector('i').classList.add('fa-eye-slash');
                } else {
                    passwordInput.type = 'password';
                    this.querySelector('i').classList.remove('fa-eye-slash');
                    this.querySelector('i').classList.add('fa-eye');
                }
            });
        });
        
        // نموذج تسجيل الدخول
        const loginForm = loginScreen.querySelector('#login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const emailInput = loginScreen.querySelector('#login-email');
                const passwordInput = loginScreen.querySelector('#login-password');
                const rememberMeCheckbox = loginScreen.querySelector('#remember-me');
                
                if (!emailInput || !passwordInput) {
                    showAuthNotification('خطأ في النموذج: بعض الحقول المطلوبة غير موجودة', 'error');
                    return;
                }
                
                const email = emailInput.value/**
 * enhanced-auth-system.js
 * نظام المصادقة والأمان المحسن لتطبيق نظام الاستثمار المتكامل
 * يوفر وظائف إدارة المستخدمين، تسجيل الدخول، والتحكم بالصلاحيات
 * مع واجهة مستخدم مُحسنة وتجربة استخدام أفضل
 */

// ثوابت النظام
const AUTH_SYSTEM_VERSION = "2.0.0";
const AUTH_TOKEN_KEY = "auth_token";
const AUTH_USER_KEY = "auth_user";
const SESSION_TIMEOUT = 30 * 60 * 1000; // 30 دقيقة بالمللي ثانية

// ثوابت لأنواع المستخدمين وصلاحياتهم
const USER_TYPES = {
    ADMIN: 'admin',    // مسؤول كامل الصلاحيات
    MANAGER: 'manager', // مدير بصلاحيات محدودة
    USER: 'user'       // مستخدم عادي
};

// الصلاحيات لكل نوع مستخدم
const PERMISSIONS = {
    [USER_TYPES.ADMIN]: {
        canCreateUsers: true,
        canDeleteUsers: true,
        canManageSettings: true,
        canDeleteInvestors: true,
        canViewAllData: true,
        canExportData: true,
        canImportData: true,
        canCreateBackup: true,
        canRestoreBackup: true
    },
    [USER_TYPES.MANAGER]: {
        canCreateUsers: false,
        canDeleteUsers: false,
        canManageSettings: true,
        canDeleteInvestors: true,
        canViewAllData: true,
        canExportData: true,
        canImportData: true,
        canCreateBackup: true,
        canRestoreBackup: false
    },
    [USER_TYPES.USER]: {
        canCreateUsers: false,
        canDeleteUsers: false,
        canManageSettings: false,
        canDeleteInvestors: false,
        canViewAllData: true,
        canExportData: true,
        canImportData: false,
        canCreateBackup: false,
        canRestoreBackup: false
    }
};

// رمز المسؤول الافتراضي - يمكن تغييره لاحقاً
let ADMIN_CODE = "admin1234";

// كائن نظام المصادقة والأمان
const AuthSystem = (function() {
    // المتغيرات الخاصة
    let currentUser = null;
    let isInitialized = false;
    let authStateListeners = [];
    let databaseRef = null;
    let storageRef = null;
    let sessionTimeoutId = null;
    let lastActivity = Date.now();
    
    /**
     * تحميل بيانات المستخدم من التخزين المحلي عند التهيئة
     */
    function loadUserFromLocalStorage() {
        try {
            const storedUser = localStorage.getItem(AUTH_USER_KEY);
            const authToken = localStorage.getItem(AUTH_TOKEN_KEY);
            
            if (storedUser && authToken) {
                const userData = JSON.parse(storedUser);
                
                // التحقق من انتهاء صلاحية الجلسة
                if (userData.sessionExpiry && new Date(userData.sessionExpiry) > new Date()) {
                    console.log("تم استعادة جلسة المستخدم من التخزين المحلي");
                    currentUser = userData;
                    
                    // تمديد مدة الجلسة
                    refreshUserSession();
                    return true;
                } else {
                    console.log("انتهت صلاحية الجلسة، يرجى إعادة تسجيل الدخول");
                    clearUserSession();
                    return false;
                }
            }
            
            return false;
        } catch (error) {
            console.error("خطأ في تحميل بيانات المستخدم من التخزين المحلي:", error);
            clearUserSession();
            return false;
        }
    }
    
    /**
     * حفظ بيانات المستخدم في التخزين المحلي
     * @param {Object} user - بيانات المستخدم
     * @param {string} token - رمز المصادقة
     */
    function saveUserToLocalStorage(user, token) {
        try {
            // إضافة وقت انتهاء الجلسة
            const sessionExpiry = new Date();
            sessionExpiry.setTime(sessionExpiry.getTime() + SESSION_TIMEOUT);
            user.sessionExpiry = sessionExpiry.toISOString();
            
            localStorage.setItem(AUTH_USER_KEY, JSON.stringify(user));
            localStorage.setItem(AUTH_TOKEN_KEY, token);
        } catch (error) {
            console.error("خطأ في حفظ بيانات المستخدم في التخزين المحلي:", error);
        }
    }
    
    /**
     * مسح بيانات المستخدم من التخزين المحلي
     */
    function clearUserSession() {
        localStorage.removeItem(AUTH_USER_KEY);
        localStorage.removeItem(AUTH_TOKEN_KEY);
        
        if (sessionTimeoutId) {
            clearTimeout(sessionTimeoutId);
            sessionTimeoutId = null;
        }
    }
    
    /**
     * تحديث جلسة المستخدم
     */
    function refreshUserSession() {
        if (!currentUser) return;
        
        // تحديث وقت النشاط الأخير
        lastActivity = Date.now();
        
        // إعادة ضبط مؤقت انتهاء الجلسة
        if (sessionTimeoutId) {
            clearTimeout(sessionTimeoutId);
        }
        
        // تحديث وقت انتهاء الجلسة في التخزين المحلي
        const sessionExpiry = new Date();
        sessionExpiry.setTime(sessionExpiry.getTime() + SESSION_TIMEOUT);
        currentUser.sessionExpiry = sessionExpiry.toISOString();
        
        localStorage.setItem(AUTH_USER_KEY, JSON.stringify(currentUser));
        
        // إعداد مؤقت جديد للجلسة
        sessionTimeoutId = setTimeout(() => {
            const timeElapsed = Date.now() - lastActivity;
            
            if (timeElapsed >= SESSION_TIMEOUT) {
                console.log("انتهت مدة الجلسة بسبب عدم النشاط");
                
                // بدلاً من تسجيل الخروج مباشرة، نقوم بعرض شاشة القفل للتحقق
                showLockScreen();
            }
        }, SESSION_TIMEOUT);
    }
    
    /**
     * تهيئة نظام المصادقة
     * @returns {Promise} وعد يشير إلى نجاح أو فشل التهيئة
     */
    function initialize() {
        console.log(`تهيئة نظام المصادقة والأمان (الإصدار ${AUTH_SYSTEM_VERSION})...`);
        
        return new Promise((resolve, reject) => {
            if (isInitialized) {
                resolve(true);
                return;
            }

            try {
                // إضافة مستمع النشاط لتتبع نشاط المستخدم
                addActivityListener();
                
                // محاولة استرجاع بيانات المستخدم من التخزين المحلي
                const userLoaded = loadUserFromLocalStorage();
                
                // التحقق من تهيئة Firebase مسبقاً
                if (!firebase.apps.length) {
                    // التكوين يجب أن يكون موجوداً بالفعل في الصفحة
                    if (typeof firebaseConfig === 'undefined') {
                        console.warn("لم يتم العثور على تكوين Firebase. سيتم استخدام وضع التخزين المحلي فقط.");
                        
                        // إذا كان المستخدم متوفر في التخزين المحلي، نستمر
                        if (userLoaded) {
                            isInitialized = true;
                            updateUIForUser();
                            notifyAuthStateListeners(currentUser);
                            resolve(true);
                            return;
                        } else {
                            // عرض شاشة تسجيل الدخول في حالة عدم وجود مستخدم مخزن
                            showLoginScreen();
                            isInitialized = true;
                            resolve(true);
                            return;
                        }
                    }
                    
                    // تهيئة Firebase
                    firebase.initializeApp(firebaseConfig);
                }
                
                // إنشاء الإشارة إلى قاعدة البيانات
                databaseRef = firebase.database();
                storageRef = firebase.storage();
                
                // التحقق من حالة المصادقة الحالية في Firebase
                firebase.auth().onAuthStateChanged(user => {
                    if (user) {
                        // الحصول على بيانات المستخدم من قاعدة البيانات
                        getUserData(user.uid)
                            .then(userData => {
                                currentUser = {
                                    uid: user.uid,
                                    email: user.email,
                                    displayName: user.displayName || userData.fullName,
                                    photoURL: user.photoURL,
                                    type: userData.type || USER_TYPES.USER,
                                    permissions: PERMISSIONS[userData.type || USER_TYPES.USER],
                                    metadata: userData
                                };
                                
                                // حفظ بيانات المستخدم في التخزين المحلي
                                saveUserToLocalStorage(currentUser, user.refreshToken);
                                
                                // تحديث واجهة المستخدم
                                updateUIForUser();
                                
                                // إخطار المستمعين بتغيير حالة المصادقة
                                notifyAuthStateListeners(currentUser);
                                
                                console.log(`تم تسجيل الدخول كـ ${currentUser.displayName || currentUser.email}`);
                                showNotification(`مرحباً بك ${currentUser.displayName || currentUser.email}!`, 'success');
                            })
                            .catch(error => {
                                console.error('خطأ في الحصول على بيانات المستخدم:', error);
                                
                                // تعيين معلومات المستخدم الأساسية
                                currentUser = {
                                    uid: user.uid,
                                    email: user.email,
                                    displayName: user.displayName || user.email,
                                    photoURL: user.photoURL,
                                    type: USER_TYPES.USER,
                                    permissions: PERMISSIONS[USER_TYPES.USER]
                                };
                                
                                // حفظ بيانات المستخدم في التخزين المحلي
                                saveUserToLocalStorage(currentUser, user.refreshToken);
                                
                                // تحديث واجهة المستخدم
                                updateUIForUser();
                                
                                // إخطار المستمعين بتغيير حالة المصادقة
                                notifyAuthStateListeners(currentUser);
                            });
                    } else {
                        currentUser = null;
                        
                        // مسح بيانات المستخدم من التخزين المحلي
                        clearUserSession();
                        
                        // تحديث واجهة المستخدم
                        updateUIForUser();
                        
                        // إخطار المستمعين بتغيير حالة المصادقة
                        notifyAuthStateListeners(null);
                        
                        console.log('لم يتم تسجيل الدخول');
                    }
                });
                
                isInitialized = true;
                resolve(true);
            } catch (error) {
                console.error('خطأ في تهيئة نظام المصادقة:', error);
                
                // في حالة الفشل، نعود إلى وضع التخزين المحلي إذا كان المستخدم موجوداً
                if (userLoaded) {
                    isInitialized = true;
                    updateUIForUser();
                    notifyAuthStateListeners(currentUser);
                    resolve(true);
                } else {
                    showLoginScreen();
                    reject(error);
                }
            }
        });
    }

    /**
     * إضافة مستمع للنشاط لتجديد الجلسة
     */
    function addActivityListener() {
        const events = ['mousedown', 'keypress', 'scroll', 'touchstart'];
        
        events.forEach(event => {
            document.addEventListener(event, refreshUserSession, { passive: true });
        });
    }

    /**
     * إنشاء حساب جديد
     * @param {string} email - البريد الإلكتروني
     * @param {string} password - كلمة المرور
     * @param {string} fullName - الاسم الكامل
     * @param {string} adminCode - رمز المسؤول (مطلوب للإنشاء الأولي أو حسابات المسؤولين)
     * @param {string} userType - نوع المستخدم (مسؤول، مدير، مستخدم)
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function signup(email, password, fullName, adminCode, userType = USER_TYPES.USER) {
        return new Promise((resolve, reject) => {
            // التحقق من وجود مستخدمين
            checkIfFirstUser()
                .then(isFirstUser => {
                    // التحقق من رمز المسؤول إذا لم يكن المستخدم الأول أو إذا طلب صلاحيات مسؤول
                    if ((!isFirstUser || userType === USER_TYPES.ADMIN) && adminCode !== ADMIN_CODE) {
                        reject(new Error('رمز المسؤول غير صحيح'));
                        return;
                    }
                    
                    // إذا كان المستخدم الأول، فسيكون مسؤولاً بغض النظر عن النوع المطلوب
                    if (isFirstUser) {
                        userType = USER_TYPES.ADMIN;
                    }
                    
                    // التحقق من صلاحية إنشاء المستخدم إذا لم يكن المستخدم الأول
                    if (!isFirstUser && currentUser) {
                        // التحقق من صلاحية إنشاء المستخدمين
                        if (!currentUser.permissions.canCreateUsers) {
                            reject(new Error('ليس لديك صلاحية إنشاء مستخدمين جدد'));
                            return;
                        }
                        
                        // التحقق من صلاحية إنشاء مسؤولين
                        if (userType === USER_TYPES.ADMIN && currentUser.type !== USER_TYPES.ADMIN) {
                            reject(new Error('ليس لديك صلاحية إنشاء مستخدمين بصلاحيات مسؤول'));
                            return;
                        }
                    }
                    
                    // الاستمرار في العملية حسب وضع التشغيل
                    if (firebase.apps.length > 0) {
                        // إنشاء المستخدم في Firebase
                        firebase.auth().createUserWithEmailAndPassword(email, password)
                            .then(userCredential => {
                                const user = userCredential.user;
                                
                                // تحديث اسم المستخدم
                                return user.updateProfile({
                                    displayName: fullName
                                }).then(() => user);
                            })
                            .then(user => {
                                // حفظ بيانات المستخدم في قاعدة البيانات
                                const userData = {
                                    uid: user.uid,
                                    email: email,
                                    fullName: fullName,
                                    type: userType,
                                    createdAt: new Date().toISOString(),
                                    lastLogin: new Date().toISOString()
                                };
                                
                                return databaseRef.ref(`users/${user.uid}/profile`).set(userData)
                                    .then(() => {
                                        // إنشاء سجل بإنشاء المستخدم
                                        const logEntry = {
                                            action: 'user_created',
                                            timestamp: new Date().toISOString(),
                                            userId: user.uid,
                                            userEmail: email,
                                            userType: userType,
                                            createdBy: currentUser ? currentUser.uid : 'self_registration'
                                        };
                                        
                                        // إضافة السجل إلى تاريخ الأحداث
                                        return databaseRef.ref('system_logs/users').push(logEntry)
                                            .then(() => {
                                                resolve({
                                                    user: user,
                                                    userData: userData
                                                });
                                            });
                                    });
                            })
                            .catch(error => {
                                console.error('خطأ في إنشاء المستخدم:', error);
                                reject(error);
                            });
                    } else {
                        // وضع التخزين المحلي (بدون Firebase)
                        // إنشاء معرف فريد للمستخدم
                        const userId = 'local_' + Date.now().toString();
                        
                        // إنشاء بيانات المستخدم
                        const userData = {
                            uid: userId,
                            email: email,
                            displayName: fullName,
                            fullName: fullName,
                            type: userType,
                            permissions: PERMISSIONS[userType],
                            createdAt: new Date().toISOString(),
                            lastLogin: new Date().toISOString(),
                            password: hashPassword(password) // تخزين كلمة المرور بشكل آمن
                        };
                        
                        // حفظ المستخدم في التخزين المحلي
                        const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                        localUsers[email] = userData;
                        localStorage.setItem('local_users', JSON.stringify(localUsers));
                        
                        // تسجيل الدخول مباشرة بعد إنشاء الحساب
                        currentUser = userData;
                        saveUserToLocalStorage(userData, 'local_token_' + Date.now());
                        updateUIForUser();
                        notifyAuthStateListeners(currentUser);
                        
                        resolve({
                            user: {
                                uid: userId,
                                email: email,
                                displayName: fullName
                            },
                            userData: userData
                        });
                    }
                })
                .catch(error => {
                    console.error('خطأ في التحقق من وجود مستخدمين:', error);
                    reject(error);
                });
        });
    }

    /**
     * تسجيل الدخول إلى الحساب
     * @param {string} email - البريد الإلكتروني
     * @param {string} password - كلمة المرور
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function login(email, password) {
        return new Promise((resolve, reject) => {
            // محاولة تسجيل الدخول بناءً على وضع التشغيل
            if (firebase.apps.length > 0) {
                // تسجيل الدخول باستخدام Firebase
                firebase.auth().signInWithEmailAndPassword(email, password)
                    .then(userCredential => {
                        const user = userCredential.user;
                        
                        // تحديث وقت آخر تسجيل دخول
                        databaseRef.ref(`users/${user.uid}/profile/lastLogin`).set(new Date().toISOString());
                        
                        // إنشاء سجل بتسجيل الدخول
                        const logEntry = {
                            action: 'user_login',
                            timestamp: new Date().toISOString(),
                            userId: user.uid,
                            userEmail: email,
                            ip: window.userIP || 'unknown',
                            userAgent: navigator.userAgent
                        };
                        
                        // إضافة السجل إلى تاريخ الأحداث
                        return databaseRef.ref('system_logs/authentication').push(logEntry)
                            .then(() => {
                                // الحصول على بيانات المستخدم من قاعدة البيانات
                                return getUserData(user.uid)
                                    .then(userData => {
                                        const userObj = {
                                            uid: user.uid,
                                            email: user.email,
                                            displayName: user.displayName || userData.fullName,
                                            photoURL: user.photoURL,
                                            type: userData.type || USER_TYPES.USER,
                                            permissions: PERMISSIONS[userData.type || USER_TYPES.USER],
                                            metadata: userData
                                        };
                                        
                                        // حفظ بيانات المستخدم في التخزين المحلي
                                        saveUserToLocalStorage(userObj, user.refreshToken);
                                        
                                        // تعيين المستخدم الحالي
                                        currentUser = userObj;
                                        
                                        // تحديث واجهة المستخدم
                                        updateUIForUser();
                                        
                                        // إخطار المستمعين بتغيير حالة المصادقة
                                        notifyAuthStateListeners(currentUser);
                                        
                                        resolve(userObj);
                                    });
                            });
                    })
                    .catch(error => {
                        console.error('خطأ في تسجيل الدخول:', error);
                        reject(error);
                    });
            } else {
                // وضع التخزين المحلي (بدون Firebase)
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                const user = localUsers[email];
                
                if (!user) {
                    reject(new Error('البريد الإلكتروني غير مسجل'));
                    return;
                }
                
                // التحقق من كلمة المرور
                if (!verifyPassword(password, user.password)) {
                    reject(new Error('كلمة المرور غير صحيحة'));
                    return;
                }
                
                // تحديث وقت آخر تسجيل دخول
                user.lastLogin = new Date().toISOString();
                localUsers[email] = user;
                localStorage.setItem('local_users', JSON.stringify(localUsers));
                
                // تعيين المستخدم الحالي
                currentUser = user;
                
                // حفظ بيانات المستخدم في التخزين المحلي
                saveUserToLocalStorage(user, 'local_token_' + Date.now());
                
                // تحديث واجهة المستخدم
                updateUIForUser();
                
                // إخطار المستمعين بتغيير حالة المصادقة
                notifyAuthStateListeners(currentUser);
                
                resolve(user);
            }
        });
    }

    /**
     * تبسيط لتشفير كلمة المرور (للوضع المحلي فقط)
     * ملاحظة: هذه ليست طريقة آمنة للغاية في بيئة الإنتاج
     * @param {string} password - كلمة المرور المراد تشفيرها
     * @returns {string} - كلمة المرور المشفرة
     */
    function hashPassword(password) {
        // في الإنتاج، يجب استخدام خوارزميات أقوى
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // تحويل إلى 32 بت
        }
        return hash.toString(16);
    }

    /**
     * التحقق من كلمة المرور (للوضع المحلي فقط)
     * @param {string} password - كلمة المرور المدخلة
     * @param {string} hashedPassword - كلمة المرور المشفرة
     * @returns {boolean} - هل كلمة المرور صحيحة
     */
    function verifyPassword(password, hashedPassword) {
        return hashPassword(password) === hashedPassword;
    }

    /**
     * تسجيل الخروج من الحساب
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function logout() {
        return new Promise((resolve, reject) => {
            try {
                // تسجيل حدث تسجيل الخروج
                if (currentUser) {
                    const logEntry = {
                        action: 'user_logout',
                        timestamp: new Date().toISOString(),
                        userId: currentUser.uid,
                        userEmail: currentUser.email
                    };
                    
                    // تخزين السجل حسب وضع التشغيل
                    if (firebase.apps.length > 0 && databaseRef) {
                        databaseRef.ref('system_logs/authentication').push(logEntry);
                    }
                }
                
                // مسح بيانات المستخدم من التخزين المحلي
                clearUserSession();
                
                // تعيين المستخدم الحالي إلى null
                currentUser = null;
                
                // تحديث واجهة المستخدم
                updateUIForUser();
                
                // إخطار المستمعين بتغيير حالة المصادقة
                notifyAuthStateListeners(null);
                
                // تسجيل الخروج من Firebase إذا كان متاحاً
                if (firebase.apps.length > 0) {
                    firebase.auth().signOut()
                        .then(() => {
                            console.log('تم تسجيل الخروج بنجاح');
                            resolve();
                        })
                        .catch(error => {
                            console.error('خطأ في تسجيل الخروج من Firebase:', error);
                            // نستمر بالرغم من الخطأ لأننا قمنا بالفعل بمسح البيانات المحلية
                            resolve();
                        });
                } else {
                    console.log('تم تسجيل الخروج بنجاح');
                    resolve();
                }
            } catch (error) {
                console.error('خطأ في تسجيل الخروج:', error);
                // نستمر بالرغم من الخطأ لتجنب بقاء المستخدم في حالة غير متسقة
                currentUser = null;
                updateUIForUser();
                notifyAuthStateListeners(null);
                resolve();
            }
        });
    }

    /**
     * التحقق من وجود مستخدمين في النظام
     * @returns {Promise<boolean>} وعد يحتوي على قيمة بولية تشير إلى ما إذا كان هذا هو المستخدم الأول
     */
    function checkIfFirstUser() {
        return new Promise((resolve) => {
            // التحقق حسب وضع التشغيل
            if (firebase.apps.length > 0 && databaseRef) {
                databaseRef.ref('users').once('value')
                    .then(snapshot => {
                        resolve(!snapshot.exists());
                    })
                    .catch(error => {
                        console.error('خطأ في التحقق من وجود مستخدمين:', error);
                        resolve(false);
                    });
            } else {
                // التحقق في وضع التخزين المحلي
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                resolve(Object.keys(localUsers).length === 0);
            }
        });
    }

    /**
     * الحصول على بيانات المستخدم من قاعدة البيانات
     * @param {string} userId - معرف المستخدم
     * @returns {Promise<Object>} وعد يحتوي على بيانات المستخدم
     */
    function getUserData(userId) {
        return new Promise((resolve, reject) => {
            if (firebase.apps.length > 0 && databaseRef) {
                databaseRef.ref(`users/${userId}/profile`).once('value')
                    .then(snapshot => {
                        const userData = snapshot.val();
                        if (!userData) {
                            reject(new Error('لم يتم العثور على بيانات المستخدم'));
                            return;
                        }
                        resolve(userData);
                    })
                    .catch(error => {
                        console.error('خطأ في الحصول على بيانات المستخدم:', error);
                        reject(error);
                    });
            } else {
                // التحقق في وضع التخزين المحلي
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                
                // البحث عن المستخدم بواسطة المعرف
                let userData = null;
                Object.values(localUsers).forEach(user => {
                    if (user.uid === userId) {
                        userData = user;
                    }
                });
                
                if (userData) {
                    resolve(userData);
                } else {
                    reject(new Error('لم يتم العثور على بيانات المستخدم'));
                }
            }
        });
    }

    /**
     * تحديث معلومات المستخدم
     * @param {string} userId - معرف المستخدم
     * @param {Object} userData - البيانات المراد تحديثها
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function updateUserData(userId, userData) {
        return new Promise((resolve, reject) => {
            // التحقق من الصلاحيات
            if (currentUser.uid !== userId && !currentUser.permissions.canCreateUsers) {
                reject(new Error('ليس لديك صلاحية تعديل بيانات المستخدمين'));
                return;
            }
            
            // منع المستخدم من تغيير نوعه إلى مسؤول إلا إذا كان مسؤولاً بالفعل
            if (userData.type === USER_TYPES.ADMIN && currentUser.type !== USER_TYPES.ADMIN) {
                reject(new Error('ليس لديك صلاحية تعيين المستخدمين كمسؤولين'));
                return;
            }
            
            if (firebase.apps.length > 0 && databaseRef) {
                databaseRef.ref(`users/${userId}/profile`).update(userData)
                    .then(() => {
                        // إنشاء سجل بتحديث بيانات المستخدم
                        const logEntry = {
                            action: 'user_updated',
                            timestamp: new Date().toISOString(),
                            userId: userId,
                            updatedBy: currentUser.uid,
                            updatedFields: Object.keys(userData)
                        };
                        
                        // إضافة السجل إلى تاريخ الأحداث
                        return databaseRef.ref('system_logs/users').push(logEntry)
                            .then(() => {
                                // إذا كان المستخدم المحدث هو المستخدم الحالي، نقوم بتحديث البيانات المحلية
                                if (userId === currentUser.uid) {
                                    // تحديث بيانات المستخدم الحالي
                                    Object.assign(currentUser, userData);
                                    
                                    // تحديث المستخدم في التخزين المحلي
                                    localStorage.setItem(AUTH_USER_KEY, JSON.stringify(currentUser));
                                    
                                    // تحديث واجهة المستخدم
                                    updateUIForUser();
                                }
                                
                                resolve();
                            });
                    })
                    .catch(error => {
                        console.error('خطأ في تحديث بيانات المستخدم:', error);
                        reject(error);
                    });
            } else {
                // وضع التخزين المحلي
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                
                // البحث عن المستخدم بواسطة المعرف
                let userEmail = null;
                Object.entries(localUsers).forEach(([email, user]) => {
                    if (user.uid === userId) {
                        userEmail = email;
                    }
                });
                
                if (userEmail) {
                    // تحديث بيانات المستخدم
                    const updatedUser = { ...localUsers[userEmail], ...userData };
                    localUsers[userEmail] = updatedUser;
                    
                    // حفظ التغييرات
                    localStorage.setItem('local_users', JSON.stringify(localUsers));
                    
                    // إذا كان المستخدم المحدث هو المستخدم الحالي، نقوم بتحديث البيانات المحلية
                    if (userId === currentUser.uid) {
                        // تحديث بيانات المستخدم الحالي
                        Object.assign(currentUser, userData);
                        
                        // تحديث المستخدم في التخزين المحلي
                        localStorage.setItem(AUTH_USER_KEY, JSON.stringify(currentUser));
                        
                        // تحديث واجهة المستخدم
                        updateUIForUser();
                    }
                    
                    resolve();
                } else {
                    reject(new Error('لم يتم العثور على المستخدم'));
                }
            }
        });
    }

    /**
     * حذف مستخدم
     * @param {string} userId - معرف المستخدم
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function deleteUser(userId) {
        return new Promise((resolve, reject) => {
            // التحقق من الصلاحيات
            if (!currentUser.permissions.canDeleteUsers) {
                reject(new Error('ليس لديك صلاحية حذف المستخدمين'));
                return;
            }
            
            // الحصول على بيانات المستخدم قبل الحذف
            getUserData(userId)
                .then(userData => {
                    // منع حذف المستخدمين المسؤولين إلا من قبل مسؤول آخر
                    if (userData.type === USER_TYPES.ADMIN && currentUser.type !== USER_TYPES.ADMIN) {
                        reject(new Error('ليس لديك صلاحية حذف المستخدمين المسؤولين'));
                        return;
                    }
                    
                    if (firebase.apps.length > 0 && databaseRef) {
                        // حذف المستخدم من قاعدة البيانات
                        databaseRef.ref(`users/${userId}`).remove()
                            .then(() => {
                                // إنشاء سجل بحذف المستخدم
                                const logEntry = {
                                    action: 'user_deleted',
                                    timestamp: new Date().toISOString(),
                                    deletedUserId: userId,
                                    deletedUserEmail: userData.email,
                                    deletedUserType: userData.type,
                                    deletedBy: currentUser.uid
                                };
                                
                                // إضافة السجل إلى تاريخ الأحداث
                                return databaseRef.ref('system_logs/users').push(logEntry)
                                    .then(() => {
                                        resolve();
                                    });
                            })
                            .catch(error => {
                                console.error('خطأ في حذف المستخدم:', error);
                                reject(error);
                            });
                    } else {
                        // وضع التخزين المحلي
                        const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                        
                        // البحث عن المستخدم بواسطة المعرف
                        let userEmail = null;
                        Object.entries(localUsers).forEach(([email, user]) => {
                            if (user.uid === userId) {
                                userEmail = email;
                            }
                        });
                        
                        if (userEmail) {
                            // حذف المستخدم
                            delete localUsers[userEmail];
                            
                            // حفظ التغييرات
                            localStorage.setItem('local_users', JSON.stringify(localUsers));
                            
                            resolve();
                        } else {
                            reject(new Error('لم يتم العثور على المستخدم'));
                        }
                    }
                })
                .catch(error => {
                    console.error('خطأ في الحصول على بيانات المستخدم قبل الحذف:', error);
                    reject(error);
                });
        });
    }

    /**
     * الحصول على قائمة المستخدمين
     * @returns {Promise<Array>} وعد يحتوي على قائمة المستخدمين
     */
    function getUsers() {
        return new Promise((resolve, reject) => {
            // التحقق من الصلاحيات
            if (!currentUser.permissions.canCreateUsers && !currentUser.permissions.canDeleteUsers && currentUser.type !== USER_TYPES.ADMIN) {
                reject(new Error('ليس لديك صلاحية عرض قائمة المستخدمين'));
                return;
            }
            
            if (firebase.apps.length > 0 && databaseRef) {
                databaseRef.ref('users').once('value')
                    .then(snapshot => {
                        const usersData = snapshot.val();
                        if (!usersData) {
                            resolve([]);
                            return;
                        }
                        
                        const usersList = [];
                        Object.keys(usersData).forEach(userId => {
                            const user = usersData[userId].profile;
                            if (user) {
                                usersList.push({
                                    uid: userId,
                                    ...user
                                });
                            }
                        });
                        
                        resolve(usersList);
                    })
                    .catch(error => {
                        console.error('خطأ في الحصول على قائمة المستخدمين:', error);
                        reject(error);
                    });
            } else {
                // وضع التخزين المحلي
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                
                const usersList = Object.values(localUsers);
                resolve(usersList);
            }
        });
    }

    /**
     * تغيير كلمة المرور
     * @param {string} currentPassword - كلمة المرور الحالية
     * @param {string} newPassword - كلمة المرور الجديدة
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function changePassword(currentPassword, newPassword) {
        return new Promise((resolve, reject) => {
            if (!currentUser) {
                reject(new Error('لم يتم تسجيل الدخول'));
                return;
            }
            
            if (firebase.apps.length > 0) {
                const user = firebase.auth().currentUser;
                if (!user) {
                    reject(new Error('لم يتم تسجيل الدخول'));
                    return;
                }
                
                // إعادة المصادقة قبل تغيير كلمة المرور
                const credential = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);
                user.reauthenticateWithCredential(credential)
                    .then(() => {
                        return user.updatePassword(newPassword);
                    })
                    .then(() => {
                        // إنشاء سجل بتغيير كلمة المرور
                        const logEntry = {
                            action: 'password_changed',
                            timestamp: new Date().toISOString(),
                            userId: user.uid,
                            userEmail: user.email
                        };
                        
                        // إضافة السجل إلى تاريخ الأحداث
                        if (databaseRef) {
                            return databaseRef.ref('system_logs/authentication').push(logEntry)
                                .then(() => {
                                    resolve();
                                });
                        } else {
                            resolve();
                        }
                    })
                    .catch(error => {
                        console.error('خطأ في تغيير كلمة المرور:', error);
                        reject(error);
                    });
            } else {
                // وضع التخزين المحلي
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                
                // البحث عن المستخدم بواسطة البريد الإلكتروني
                const userEmail = currentUser.email;
                
                if (localUsers[userEmail]) {
                    // التحقق من كلمة المرور الحالية
                    if (!verifyPassword(currentPassword, localUsers[userEmail].password)) {
                        reject(new Error('كلمة المرور الحالية غير صحيحة'));
                        return;
                    }
                    
                    // تحديث كلمة المرور
                    localUsers[userEmail].password = hashPassword(newPassword);
                    
                    // حفظ التغييرات
                    localStorage.setItem('local_users', JSON.stringify(localUsers));
                    
                    resolve();
                } else {
                    reject(new Error('لم يتم العثور على المستخدم'));
                }
            }
        });
    }

    /**
     * إرسال رسالة إعادة تعيين كلمة المرور
     * @param {string} email - البريد الإلكتروني
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function resetPassword(email) {
        return new Promise((resolve, reject) => {
            if (firebase.apps.length > 0) {
                firebase.auth().sendPasswordResetEmail(email)
                    .then(() => {
                        // إنشاء سجل بطلب إعادة تعيين كلمة المرور
                        const logEntry = {
                            action: 'password_reset_requested',
                            timestamp: new Date().toISOString(),
                            userEmail: email,
                            requestedBy: currentUser ? currentUser.uid : 'self'
                        };
                        
                        // إضافة السجل إلى تاريخ الأحداث
                        if (databaseRef) {
                            return databaseRef.ref('system_logs/authentication').push(logEntry)
                                .then(() => {
                                    resolve();
                                });
                        } else {
                            resolve();
                        }
                    })
                    .catch(error => {
                        console.error('خطأ في إرسال رسالة إعادة تعيين كلمة المرور:', error);
                        reject(error);
                    });
            } else {
                // وضع التخزين المحلي - نقوم بإعادة تعيين كلمة المرور مباشرة إلى قيمة افتراضية
                const localUsers = JSON.parse(localStorage.getItem('local_users') || '{}');
                
                if (localUsers[email]) {
                    // إعادة تعيين كلمة المرور إلى قيمة افتراضية (123456)
                    localUsers[email].password = hashPassword('123456');
                    
                    // حفظ التغييرات
                    localStorage.setItem('local_users', JSON.stringify(localUsers));
                    
                    showNotification('تم إعادة تعيين كلمة المرور إلى: 123456', 'info');
                    resolve();
                } else {
                    reject(new Error('البريد الإلكتروني غير مسجل'));
                }
            }
        });
    }

    /**
     * تغيير رمز المسؤول
     * @param {string} currentAdminCode - رمز المسؤول الحالي
     * @param {string} newAdminCode - رمز المسؤول الجديد
     * @returns {Promise} وعد يشير إلى نجاح أو فشل العملية
     */
    function changeAdminCode(currentAdminCode, newAdminCode) {
        return new Promise((resolve, reject) => {
            // التحقق من الصلاحيات
            if (currentUser.type !== USER_TYPES.ADMIN) {
                reject(new Error('ليس لديك صلاحية تغيير رمز المسؤول'));
                return;
            }
            
            // التحقق من صحة رمز المسؤول الحالي
            if (currentAdminCode !== ADMIN_CODE) {
                reject(new Error('رمز المسؤول الحالي غير صحيح'));
                return;
            }
            
            if (firebase.apps.length > 0 && databaseRef) {
                // تحديث رمز المسؤول في الإعدادات
                databaseRef.ref('system_settings/admin_code').set({
                    code: newAdminCode,
                    updatedAt: new Date().toISOString(),
                    updatedBy: currentUser.uid
                })
                .then(() => {
                    // تحديث المتغير المحلي
                    ADMIN_CODE = newAdminCode;
                    
                    // إنشاء سجل بتغيير رمز المسؤول
                    const logEntry = {
                        action: 'admin_code_changed',
                        timestamp: new Date().toISOString(),
                        updatedBy: currentUser.uid,
                        userEmail: currentUser.email
                    };
                    
                    // إضافة السجل إلى تاريخ الأحداث
                    return databaseRef.ref('system_logs/system').push(logEntry)
                        .then(() => {
                            resolve();
                        });
                })
                .catch(error => {
                    console.error('خطأ في تغيير رمز المسؤول:', error);
                    reject(error);
                });
            } else {
                // وضع التخزين المحلي
                ADMIN_CODE = newAdminCode;
                
                // حفظ الرمز الجديد في التخزين المحلي
                localStorage.setItem('admin_code', newAdminCode);
                
                showNotification('تم تغيير رمز المسؤول بنجاح', 'success');
                resolve();
            }
        });
    }

    /**
     * إضافة مستمع لحالة المصادقة
     * @param {Function} listener - دالة الاستماع
     */
    function addAuthStateListener(listener) {
        if (typeof listener === 'function' && !authStateListeners.includes(listener)) {
            authStateListeners.push(listener);
        }
    }

    /**
     * إزالة مستمع لحالة المصادقة
     * @param {Function} listener - دالة الاستماع
     */
    function removeAuthStateListener(listener) {
        const index = authStateListeners.indexOf(listener);
        if (index !== -1) {
            authStateListeners.splice(index, 1);
        }
    }

    /**
     * إخطار جميع مستمعي حالة المصادقة
     * @param {Object|null} user - معلومات المستخدم
     */
    function notifyAuthStateListeners(user) {
        authStateListeners.forEach(listener => {
            try {
                listener(user);
            } catch (error) {
                console.error('خطأ في مستمع حالة المصادقة:', error);
            }
        });
    }

    /**
     * تحديث واجهة المستخدم بناءً على حالة المصادقة
     */
    function updateUIForUser() {
        if (currentUser) {
            // إخفاء شاشة تسجيل الدخول
            hideLoginScreen();
            
            // عرض اسم المستخدم ونوعه في الواجهة
            updateUserInfo();
            
            // تحديث وصول العناصر بناءً على الصلاحيات
            updateElementsAccess();
            
            // تفعيل النشاط التلقائي
            setupAutoLock();
        } else {
            // عرض شاشة تسجيل الدخول
            showLoginScreen();
        }
    }

    /**
     * عرض شاشة تسجيل الدخول المحسنة
     */
    function showLoginScreen() {
        console.log('عرض شاشة تسجيل الدخول...');
        
        const loginScreen = document.getElementById('auth-login-screen');
        
        if (!loginScreen) {
            // إنشاء شاشة تسجيل الدخول المحسنة إذا لم تكن موجودة
            createEnhancedLoginScreen();
        } else {
            // تحديث شاشة تسجيل الدخول الموجودة
            updateLoginScreen(loginScreen);
            
            // إظهار الشاشة
            loginScreen.style.display = 'flex';
            
            // إضافة تأثير حركي
            setTimeout(() => {
                loginScreen.classList.add('active');
            }, 10);
        }
        
        // إخفاء المحتوى الرئيسي
        const appContent = document.querySelector('.layout');
        if (appContent) {
            appContent.style.display = 'none';
        }
    }

    /**
     * إخفاء شاشة تسجيل الدخول
     */
    function hideLoginScreen() {
        const loginScreen = document.getElementById('auth-login-screen');
        
        if (loginScreen) {
            // إضافة تأثير حركي للإخفاء
            loginScreen.classList.remove('active');
            
            // انتظار انتهاء التأثير الحركي
            setTimeout(() => {
                loginScreen.style.display = 'none';
            }, 300);
        }
        
        // إظهار المحتوى الرئيسي
        const appContent = document.querySelector('.layout');
        if (appContent) {
            appContent.style.display = 'flex';
        }
    }

    /**
     * إنشاء شاشة تسجيل الدخول المحسنة
     */
    function createEnhancedLoginScreen() {
        console.log('إنشاء شاشة تسجيل الدخول المحسنة...');
        
        // إنشاء عنصر الشاشة
        const loginScreen = document.createElement('div');
        loginScreen.id = 'auth-login-screen';
        loginScreen.className = 'auth-screen';
        
        // إضافة محتوى الشاشة
        loginScreen.innerHTML = `
            <div class="auth-container">
                <div class="auth-content">
                    <div class="auth-header">
                        <div class="auth-logo">
                            <i class="fas fa-chart-line"></i>
                            <span>نظام الاستثمار المتكامل</span>
                        </div>
                        <p class="auth-welcome">مرحباً بك في نظام الاستثمار المتكامل</p>
                    </div>
                    
                    <div class="auth-tabs">
                        <button class="auth-tab active" data-tab="login">تسجيل الدخول</button>
                        <button class="auth-tab" data-tab="register">إنشاء حساب</button>
                    </div>
                    
                    <div class="auth-tab-content active" id="login-tab-content">
                        <form id="login-form">
                            <div class="form-group">
                                <label class="form-label">البريد الإلكتروني</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-envelope"></i>
                                    <input type="email" class="form-input" id="login-email" required autocomplete="email">
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">كلمة المرور</label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-lock"></i>
                                    <input type="password" class="form-input" id="login-password" required autocomplete="current-password">
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-options">
                                <label class="checkbox-container">
                                    <input type="checkbox" id="remember-me">
                                    <span class="checkmark"></span>
                                    <span>تذكرني</span>
                                </label>
                                <button type="button" class="btn-link" id="forgot-password-btn">نسيت كلمة المرور؟</button>
                            </div>
                            
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary btn-block btn-animated">
                                    <span>تسجيل الدخول</span>
                                    <i class="fas fa-sign-in-alt"></i>
                                </button>
                            </div>
                        </form>
                    </div>
                    
                    <div class="auth-tab-content" id="register-tab-content">
                        <form id="register-form">
                            <div class="form-group">
                                <label class="form-label">الاسم الكامل</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-user"></i>
                                    <input type="text" class="form-input" id="register-name" required>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">البريد الإلكتروني</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-envelope"></i>
                                    <input type="email" class="form-input" id="register-email" required>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">كلمة المرور</label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-lock"></i>
                                    <input type="password" class="form-input" id="register-password" required>
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">تأكيد كلمة المرور</label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-lock"></i>
                                    <input type="password" class="form-input" id="register-confirm-password" required>
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">رمز المسؤول <small>(مطلوب للمستخدم الأول أو للمسؤول)</small></label>
                                <div class="input-with-icon password-input-container">
                                    <i class="fas fa-key"></i>
                                    <input type="password" class="form-input" id="register-admin-code">
                                    <button type="button" class="toggle-password" tabindex="-1">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">نوع المستخدم</label>
                                <div class="input-with-icon">
                                    <i class="fas fa-users-cog"></i>
                                    <select class="form-select" id="register-user-type">
                                        <option value="user">مستخدم عادي</option>
                                        <option value="manager">مدير</option>
                                        <option value="admin">مسؤول</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary btn-block btn-animated">
                                    <span>إنشاء حساب</span>
                                    <i class="fas fa-user-plus"></i>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                
                <div class="auth-footer">
                    <p>نظام الاستثمار المتكامل &copy; ${new Date().getFullYear()} | <span class="version-info">الإصدار ${AUTH_SYSTEM_VERSION}</span></p>
                </div>
            </div>
            
            <div class="auth-notification">
                <div class="auth-notification-content">
                    <i class="auth-notification-icon"></i>
                    <span class="auth-notification-message"></span>
                </div>
                <button class="auth-notification-close">&times;</button>
            </div>
        `;
        
        // إضافة عنصر الشاشة إلى الصفحة
        document.body.appendChild(loginScreen);
        
        // إضافة مستمعي الأحداث لشاشة تسجيل الدخول
        setupLoginScreenListeners(loginScreen);
        
        // إظهار الشاشة بتأثير حركي
        setTimeout(() => {
            loginScreen.classList.add('active');
        }, 10);
    }
